{"name": "test_home", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.liinji.liinjias.test' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: Error executing adbExec. Original error: 'Command 'E:\\\\Android\\\\SDK\\\\platform-tools\\\\adb.exe -P 5037 -s b8b46013 shell am start -W -n com.liinji.liinjias.test/activity.LoginNewActivity -S -a android.intent.action.MAIN -c android.intent.category.LAUNCHER -f 0x10200000' exited with code 255'; Stderr: 'Exception occurred while executing 'start':\r\njava.lang.SecurityException: Permission Denial: starting Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.liinji.liinjias.test/activity.LoginNewActivity } from null (pid=29064, uid=2000) not exported from uid 10501\r\n\tat com.android.server.wm.ActivityStackSupervisor.checkStartAnyActivityPermission(ActivityStackSupervisor.java:1107)\r\n\tat com.android.server.wm.ActivityStarter.executeRequest(ActivityStarter.java:1103)\r\n\tat com.android.server.wm.ActivityStarter.execute(ActivityStarter.java:749)\r\n\tat com.android.server.wm.ActivityTaskManagerService.startActivityAndWait(ActivityTaskManagerService.java:1390)\r\n\tat com.android.server.am.ActivityManagerService.startActivityAndWait(ActivityManagerService.java:3756)\r\n\tat com.android.server.am.ActivityManagerShellCommand.runStartActivity(ActivityManagerShellCommand.java:548)\r\n\tat com.android.server.am.ActivityManagerShellCommand.onCommand(ActivityManagerShellCommand.java:185)\r\n\tat android.os.BasicShellCommandHandler.exec(BasicShellCommandHandler.java:98)\r\n\tat android.os.ShellCommand.exec(ShellCommand.java:44)\r\n\tat com.android.server.am.ActivityManagerService.onShellCommand(ActivityManagerService.java:10887)\r\n\tat android.os.Binder.shellCommand(Binder.java:932)\r\n\tat android.os.Binder.onTransact(Binder.java:816)\r\n\tat android.app.IActivityManager$Stub.onTransact(IActivityManager.java:5274)\r\n\tat com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:2948)\r\n\tat android.os.Binder.execTransactInternal(Binder.java:1162)\r\n\tat android.os.Binder.execTransact(Binder.java:1126)'; Code: '255'", "trace": "self = <class 'Script.test_pjj.TestPjj'>\n\n    def setup_class(self):\n        # 初始化driver\n>       self.driver = GetDriver.init_driver()\n\nScript\\test_pjj.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nBasic\\Get_Driver.py:27: in init_driver\n    cls.driver = webdriver.Remote(\"http://127.0.0.1:4723/wd/hub\", desired_caps)\nd:\\python37\\lib\\site-packages\\appium\\webdriver\\webdriver.py:157: in __init__\n    AppiumConnection(command_executor, keep_alive=keep_alive), desired_capabilities, browser_profile, proxy\nd:\\python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\nd:\\python37\\lib\\site-packages\\appium\\webdriver\\webdriver.py:226: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, parameters)\nd:\\python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C52DC03EB8>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...s\\\\\\\\app\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\appium-base-driver\\\\\\\\lib\\\\\\\\protocol\\\\\\\\protocol.js:380:37)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.liinji.liinjias.test' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: Error executing adbExec. Original error: 'Command 'E:\\\\Android\\\\SDK\\\\platform-tools\\\\adb.exe -P 5037 -s b8b46013 shell am start -W -n com.liinji.liinjias.test/activity.LoginNewActivity -S -a android.intent.action.MAIN -c android.intent.category.LAUNCHER -f 0x10200000' exited with code 255'; Stderr: 'Exception occurred while executing 'start':\r\nE       java.lang.SecurityException: Permission Denial: starting Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.liinji.liinjias.test/activity.LoginNewActivity } from null (pid=29064, uid=2000) not exported from uid 10501\r\nE       \tat com.android.server.wm.ActivityStackSupervisor.checkStartAnyActivityPermission(ActivityStackSupervisor.java:1107)\r\nE       \tat com.android.server.wm.ActivityStarter.executeRequest(ActivityStarter.java:1103)\r\nE       \tat com.android.server.wm.ActivityStarter.execute(ActivityStarter.java:749)\r\nE       \tat com.android.server.wm.ActivityTaskManagerService.startActivityAndWait(ActivityTaskManagerService.java:1390)\r\nE       \tat com.android.server.am.ActivityManagerService.startActivityAndWait(ActivityManagerService.java:3756)\r\nE       \tat com.android.server.am.ActivityManagerShellCommand.runStartActivity(ActivityManagerShellCommand.java:548)\r\nE       \tat com.android.server.am.ActivityManagerShellCommand.onCommand(ActivityManagerShellCommand.java:185)\r\nE       \tat android.os.BasicShellCommandHandler.exec(BasicShellCommandHandler.java:98)\r\nE       \tat android.os.ShellCommand.exec(ShellCommand.java:44)\r\nE       \tat com.android.server.am.ActivityManagerService.onShellCommand(ActivityManagerService.java:10887)\r\nE       \tat android.os.Binder.shellCommand(Binder.java:932)\r\nE       \tat android.os.Binder.onTransact(Binder.java:816)\r\nE       \tat android.app.IActivityManager$Stub.onTransact(IActivityManager.java:5274)\r\nE       \tat com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:2948)\r\nE       \tat android.os.Binder.execTransactInternal(Binder.java:1162)\r\nE       \tat android.os.Binder.execTransact(Binder.java:1126)'; Code: '255'\n\nd:\\python37\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException"}, "start": 1635992416221, "stop": 1635992416221, "uuid": "3696c32a-bdcf-4a6a-a7b1-86a34d5eaa89", "historyId": "1951af5a713d0e5a847005285ebb873c", "testCaseId": "846630f1ec205bff93c07a1b0f5d8ee7", "fullName": "Script.test_pjj.TestPjj#test_home", "labels": [{"name": "parentSuite", "value": "Script"}, {"name": "suite", "value": "test_pjj"}, {"name": "subSuite", "value": "TestPjj"}, {"name": "host", "value": "DESKTOP-NGPD59M"}, {"name": "thread", "value": "20884-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Script.test_pjj"}]}